"""Probability distance

The ProbabilityDistance class measures how likely each predicted target value 
(output) was to have been generated by a 'positive' distribution or density, 
rather than a 'negative' distribution or density.
"""


class ProbabilityDistance():
    """Computes regression distance

    Parameters
    ----------
    positive : callable or list of callables
        Densities and distributions take the output of a model, usually a (# 
        samples x 1) or (# samples x # classes) vector. It returns a (# samples 
        x 1) vector of probabilities that the predicted target value was 
        generated by the density or distribution.
        
    negative : callable or list of callables
    """
    def __init__(self, positive=None, negative=None):
        self.positive = positive
        self.negative = negative

    def __call__(self, output):
        """
        Compute probability that every predicted target value was generated by 
        a positive density or distribution, rather than a negative density or 
        distribution.
        """
        p_pos = self._compute_probability(self.positive, output)
        if self.negative:
            p_neg = self._compute_probability(self.negative, output)
        else:
            p_neg = 1 - p_pos
        x = 1 / (1 + (p_neg/p_pos).prod())
        return x

    def _compute_probability(self, funcs, output):
        """
        Compute the probability that each value of the output was generated by 
        one of the density or distribution functions.

        Parameters
        ----------
        funcs : None, callable, or list of callables
            Density functions
        output : np.array-like
            (# samples x 1) model output vector
        """
        if funcs is None:
            funcs = []
        elif not isinstance(funcs, list):
            funcs = [funcs]
        return sum([func(output) for func in funcs])